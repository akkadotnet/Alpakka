parameters:
  name: ''
  displayName: ''
  vmImage: ''
  scriptFileName: ''
  scriptArgs: 'all'
  outputDirectory : ''
  artifactName: ''
  timeoutInMinutes: 120
  amqpTestUseDocker : false # Flag for Akka.Streams.Azure.StorageQueue.Test to use docker

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      Alpakka_AMQP_Test_UseDocker: ${{ parameters.amqpTestUseDocker }}
    steps:
      - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
        clean: false  # whether to fetch clean each time
        submodules: recursive  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
        persistCredentials: true

      - task: UseDotNet@2
        displayName: 'Use .NET 7 SDK 7.0'
        inputs:
          version: 7.0.x
      - task: UseDotNet@2 # to keep DocFx happy
        displayName: "Use .NET 6 SDK 6.0"
        inputs:
          version: 6.0.x
      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 3.1'
        inputs:
          version: 3.1.x

      # Linux
      # Install Azurite in linux
      - bash: |
          sudo npm install -g azurite@3.19.0
          sudo mkdir azurite
          sudo azurite --silent --location azurite --debug azirute/debug.log &
        displayName: 'Install and Run Azurite (Linux)'
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )
      
      # Do build
      - task: Bash@3 
        displayName: Linux / OSX Build
        inputs:
          filePath: ${{ parameters.scriptFileName }}
          arguments: ${{ parameters.scriptArgs }}
        continueOnError: true
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )

      # Windows
      # Start Azure Storage Emulator in windows
      - powershell: |
          npm install -g azurite@3.19.0
          mkdir azurite
          Start-Process azurite.cmd -PassThru
        displayName: 'Install and Run Azurite (Windows)'
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      
      # Do build
      - task: BatchScript@1
        displayName: Windows Build
        inputs:
          filename: ${{ parameters.scriptFileName }}
          arguments: ${{ parameters.scriptArgs }}
        continueOnError: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      # Common steps
      - task: CopyFiles@2
        displayName: 'Copy Build Output'
        inputs:
          sourceFolder: ${{ parameters.outputDirectory }}
          contents: '**\*'
          targetFolder: $(Build.ArtifactStagingDirectory)
          continueOnError: false  # 'true' if future steps should run even if this step fails; defaults to 'false'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: ${{ parameters.artifactName }}
      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx' #TestResults folder usually
          testRunTitle: ${{ parameters.name }}
          mergeTestResults: true
          failTaskOnFailedTests: true # 'true' if the build process should fail if any of the tests fails; defaults to 'false'
      - script: 'echo 1>&2'
        failOnStderr: true
        displayName: 'If above is partially succeeded, then fail'
        condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')